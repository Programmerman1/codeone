<!DOCTYPE html>
<html>
<head>
    <title></title>
	<meta charset="utf-8" />
</head>
<body>
    <pre id="testresults"></pre>
    <script type="text/javascript" src="scripts/algorithm.js"></script>
    <script type="text/javascript" src="scripts/explanations.js"></script>
    <script type="text/javascript">

        function SampleInput() {
            var result = {
                Goals: [Goal.Home],
                PayAmount: 1600,
                PayFrequency: Frequency.Biweekly,
                RetirementSavings: 10000,
                OtherSavings: 100,
                Home: {
                    Payment: 900,
                    TotalOwed: 90000,
                    IsOwned: true
                },
                Car: {
                    Payment: 500,
                    TotalOwed: 5000,
                    IsOwned: true
                },
                College: {
                    Payment: 0,
                    TotalOwed: 0,
                    IsOwned: false
                },
                OtherDebts: {
                    Payment: 100,
                    TotalOwed: 1500,
                    IsOwned: false
                },
                MandatoryExpenses: 1000,
                OtherExpenses: 500
            };
            return result;
        }

        function logTestResult(message) {
            document.getElementById('testresults').appendChild(document.createTextNode(message + '\r\n'));
        }
        //Basic test:
        (function () {
            var decision = MakeDecision(SampleInput());
            if (decision.PrimaryGoal != Goal.EmergencyFund) {
                logTestResult('fail: basic test did not return emergency fund goal, returned ' + Goal[decision.PrimaryGoal] + '.');
            } else if (decision.PrimaryGoal == Goal.EmergencyFund) {
                logTestResult('pass: sample test returned emergency fund goal');
            }
        }());

        //Empty selected goal array doesn't break anything.
        (function () {
            try {
                var input = SampleInput();
                input.Goals = [];
                var decision = MakeDecision(input);
                logTestResult("pass: empty array test");
            } catch (e) {
                logTestResult("fail: empty goal array threw exception");
            }
        }());

        //Weird Rich Person
        (function () {
            try {
                var input = SampleInput();
                input.Goals = [Goal.Vacation, Goal.Retirement];
                input.PayAmount = 12000;
                input.PayFrequency = Frequency.Monthly;
                input.RetirementSavings = 70000000000;
                input.OtherSavings = 80000000;
                input.Home.Payment = 0;
                input.Home.IsOwned = true;
                input.Home.TotalOwed = 0;
                input.Car.Payment = 0;
                input.Car.IsOwned = true;
                input.Car.TotalOwed = 0;
                input.College.Payment = 0;
                input.College.IsOwned = true;
                input.College.TotalOwed = 0;
                input.OtherDebts.Payment = 0;
                input.OtherDebts.IsOwned = true;
                input.OtherDebts.TotalOwed = 0;
                input.OtherExpenses = 420;
                input.MandatoryExpenses = 0;

                var decision = MakeDecision(input);
                if (decision.PrimaryGoal == Goal.Retirement || decision.PrimaryGoal == Goal.Vacation) {
                    logTestResult("pass: weird rich person, primary goal is " + Goal[decision.PrimaryGoal]);
                } else {
                    logTestResult("fail: weird rich person's primary goal is " + Goal[decision.PrimaryGoal]);
                }
            } catch (e) {
                logTestResult("fail: empty goal array threw exception");
            }
        }());

        //make sure explanation works
        (function () {
            var input = SampleInput();
            var decision = MakeDecision(input);
            logTestResult(getExplanation(decision));
        }());
    </script>
</body>
</html>
